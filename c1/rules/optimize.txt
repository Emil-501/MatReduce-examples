// table1: action1: nop(a>>0), action2: drop(a>>1);
// table2: action3: drop(a>>2), action4: set_ecmp_select(a>>3).
//
// the priority is reversed, that means the highest priority is 0 in real
// image-real mapping: 1-4, 2-3, 3-2, 4-1
//
// (1)default rule of all miss
//
// table_add composed_t _drop 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 =>
//
// (2)default rule of ipv4_tcp_acl; go table1, do action2(0010), action2 is default(0010)
//
// table_add composed_t composed_a 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 => 2 2 0 0 4
//
// (3)default rule of ecmp_group; go table2, do action3(0100), action3 is default(0100)
//
// table_add composed_t composed_a 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 => 4 4 0 0 4
// table_add composed_t composed_a 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 => 4 4 0 0 4
// 
// (4)found overlap, default rule of ipv4_tcp_acl + default rule of ecmp_group
// 1.go table1, do action2(0010), action2 is default(0010), priority 1+1=2
// 2.go table2, do action3(0100), action3 is default(0100), priority 1+1=2
// = go table1,2, do action2,3(0110), action2 is default, action3 is default(0110)
//
table_add composed_t composed_a 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 => 6 6 0 0 4
table_add composed_t composed_a 0&&&0 0&&&0 0&&&0 0&&&0 0&&&0 => 6 6 0 0 4
//
// (5)original hit rules of ipv4_tcp_acl; go table1, do action1(0001), action1 is not default(0)
//
// table_add composed_t composed_a 1&&&0xF 10.0.0.1&&&255.255.255.255 10.0.0.2&&&255.255.255.255 0&&&0 0&&&0 => 1 0 0 0 3
// table_add composed_t composed_a 2&&&0xF 10.0.0.2&&&255.255.255.255 10.0.0.1&&&255.255.255.255 0&&&0 0&&&0 => 1 0 0 0 3
//
// (6)found overlap, hit rules of ipv4_tcp_acl + (3), because the second bit of (3) != 0
// 1.go table2, do action3(0100), action3 is default(0100), priority 1+2=3
// 2.go table1, do action1(0001), action1 is not default(0), priority 1+2=3
// = do action1,3(0101), action3 is default, action1 is not default(0100)
// (hint: one rule do only one action)
//
// table_add composed_t composed_a 1&&&0xF 10.0.0.1&&&255.255.255.255 10.0.0.2&&&255.255.255.255 0&&&0 0&&&0 => 5 0 0 0 2
// table_add composed_t composed_a 2&&&0xF 10.0.0.2&&&255.255.255.255 10.0.0.1&&&255.255.255.255 0&&&0 0&&&0 => 5 0 0 0 2
//
// (7)original hit rules of ecmp_group; go table2, do action4(1000), action4 is not default(0)
// 
table_add composed_t composed_a 0&&&0 0&&&0 10.0.0.2&&&255.255.255.255 0&&&0 0&&&0 => 8 0 0 1 3
table_add composed_t composed_a 0&&&0 0&&&0 10.0.0.1&&&255.255.255.255 0&&&0 0&&&0 => 8 0 1 1 3
//
// (8)found overlap, (7) + (5), because the third bit of (5) != 0
// 1.go table1, do action1(0001), action1 is not default(0), priority 2+2=4
// 2.go table2, do action4(1000), action4 is not default(0), priority 2+2=4
// = do action1,4(1001), action3 is not default, action1 is not default(0)
//
table_add composed_t composed_a 1&&&0xF 10.0.0.1&&&255.255.255.255 10.0.0.2&&&255.255.255.255 0&&&0 0&&&0 => 9 0 0 1 2
table_add composed_t composed_a 2&&&0xF 10.0.0.2&&&255.255.255.255 10.0.0.1&&&255.255.255.255 0&&&0 0&&&0 => 9 0 1 1 2
//
// rules for other tables
table_set_default ecmp_nhop drop
table_add ecmp_nhop set_nhop 0 => 00:00:00:00:00:02 10.0.0.2 2
table_add ecmp_nhop set_nhop 1 => 00:00:00:00:00:01 10.0.0.1 1
table_add send_frame rewrite_mac 1 => 00:00:00:00:00:02
table_add send_frame rewrite_mac 2 => 00:00:00:00:00:01
